@mixin breakpoint($direction, $point1, $point2: null) {

	@if $direction == 'above' {
		@media (min-width: $point1) { @content; }

	} @else if $direction == 'below' {
		@media (max-width: $point1) { @content; }

	} @else if $direction == 'between' {
		@media (min-width: $point1) and (max-width: $point2) { @content; }
	}
}

@mixin on-small-only() { @include breakpoint('below', 750px) { @content; } }
@mixin on-medium-only() { @include breakpoint('between', 751px, 1200px) { @content; } }
@mixin above-medium { @include breakpoint('above', 751px) { @content; } }
@mixin above-large() { @include breakpoint('above', 1201px) { @content; } }

@mixin clearfix {
	&:before, 
	&:after { 
		content: ""; 
		display: table; 
	}

	&:after { 
		clear: both; 
	}
}

@function rem($pixels, $context: $base-font-size) {
	@return ($pixels / $context) * 1rem;
}

@mixin font-size($pixels) {
	font-size: $pixels + px;
	font-size: rem($pixels);
}

@mixin transition() {
	transition: 300ms ease;
}

@mixin grid-setup($cols, $margin, $selector) {
	font-size: 0;

	$cellWidth: ( 100% / $cols );
	$colsMinusOne: ($cols - 1); 
	$adjustedMargin: ($margin * $colsMinusOne) / $cols;

	> #{$selector} {
		@include font-size($base-font-size);
		margin-bottom: $margin;
		margin-right: $margin;
		display: inline-block;
		vertical-align: top;
		width: calc( #{$cellWidth} - #{$adjustedMargin} );

		// Far right column
		&:nth-of-type(#{$cols}n) { 
			margin-right: 0;
		}

		// Far left column
		&:nth-of-type(#{$cols}n+1) {}
	
		// Bottom row
		@for $i from 1 through $cols {
			&:nth-last-of-type(#{$i}) {
				margin-bottom: 0;
			}
		}

		// Very last
		&:last-of-type {
			margin-right: 0;
		}
	}
}

@mixin bottom-gradient($opacity: 1) {
	position: relative;

	&:after {
		content: "";
		position: absolute;
		top: 40%;
		left: 0;
		bottom: 0;
		right: 0;
		z-index: 0;
		opacity: $opacity;
		background-image: linear-gradient(to bottom, transparent, #000);
	}	
}